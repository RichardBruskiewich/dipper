
 

circa 2017 the files were fetched via the unbelivable simple expediant of:
   
    'select * from <table_n>;'

as an incremental improvment Kent made the fields explicit:

    'select f1,f2,f3... from <table_n>;'

which helps.

Early 2020 we made the python code use these explicit fiels and lost 200k RDF statments.

with our code explicitly doing exactly what we believed it to be implicitly doing the 
discrepency is difficult to reconcile as good or bad. 

Compounded by no one involved in writing the MGI ingest working for Monarch anymore
and much of the "data" in the tables we pull being MGI-INTERNAL-database integers.

It seems a good idea to reverse engineer and document what is currently there 
and rewrite the queries to include zero mgi-internal-internal identifiers 
(all of which have coulumn headers that begin with an underscore)

This can be done by followling the schema at 

http://www.informatics.jax.org/schema_pg/index.html
   
where we find ~400 tables-views and  ~1,900 columns 

... peice of cake



The list of MGI/JAX's postgres views and tables that dipper fetches (circa 2020)
and then re processed in python.

extract from the python dict  MGI.tables and put in text file 

    SQL/view_list

Unfortunatly MGI's SchemaSpy documentaion provides no explaination beyond column names 
for database "views" so the explicit primary_key foreign_key constraints are obscured.  

Also unfortunatly, 16 of 18 files we pull are views and not proper tables....

We can retrieve the statment used to create the view from the database .


# pre-generating the psql commands 
for v in $(grep view view_list) ; do echo "\d+ $v";done

\d+ all_allele_view
\d+ all_summary_view
\d+ bib_acc_view
\d+ voc_evidence_view
\d+ gxd_allelepair_view
\d+ gxd_genotype_summary_view
\d+ gxd_genotype_view
\d+ mgi_note_allele_view
\d+ mgi_note_vocevidence_view
\d+ mrk_acc_view
\d+ mrk_marker_view
\d+ mrk_summary_view
\d+ prb_strain_acc_view
\d+ prb_strain_genotype_view
\d+ prb_strain_view
\d+ voc_annot_view

# then issue them in the psql shell
psql -U llui  -h mgi-adhoc.jax.org -d mgd


from there we can extended 'view_list' to 'view_tables' which includes the tables
joined to form the view. 

```
cat SQL/view_tables
all_allele_view  == all_allele a
     LEFT JOIN mrk_marker m 		ON a._marker_key = m._marker_key
     LEFT JOIN bib_citation_cache r ON a._refs_key = r._refs_key
     LEFT JOIN mgi_user u3 			ON a._approvedby_key = u3._user_key

all_summary_view == acc_accession a
    join acc_accession a2 on a._object_key = a2._object_key 
    join all_allele al on a._object_key = al._allele_key 
    join voc_term t on al._allele_type_key = t._term_key

    -- AND a._mgitype_key = 11 
    -- AND a.private = 0 
    -- AND a2._logicaldb_key = 1 
    -- AND a2._mgitype_key = 11 
    -- AND a2.prefixpart = 'MGI:'::text 
    -- AND a2.preferred = 1 

...
``` 

Which provides us with a way to follow the explicit links in the underlying tables.
it also shows ridicoulsly easy ways to reduce the burden all around by just now pulling
rows we know we to not want (because we filter them out in python after fetching them)

we also read through some of the down load files twice. 
Once to collect internal identifiers mapped to external "MGI:" identifiers
and again to apply them. which means the files have to be read in a particular order
so the internal identifiers are mapped before they are used.

the python structure to hold these mgi-internal to mgi-external mappings is:

```
self.idhash = {
            'allele': {},
            'marker': {},
            'publication': {},
            'strain': {},
            'genotype': {},
            'annot': {},
            'notes': {},
            'seqalt': {}
        }
``` 

Unfortunatly there is no way short of reading the 2,300 line python program to know how 
these interact in their vaiant attempt to recreate a basic relational algerbra engine.

... which I did manually as:  mgi_view_reverseing.gv
    
---------------------------------------------------------------------------------------

next steps will be to rewrite the view queries to 
    - omit unused fields
    - replace opaque integer mgi-internal-identifiers with what they represent
    - filter the remaining (e.g. do not bother downloading "withdrawn")

Depending on how things are going;
    consider moving the  self.idhash joins to the server as well.
 

























#######################  from 2018 or before ##########################################
###  Xml representation of JAX's schema
wget http://www.informatics.jax.org/schema_pg/pub.mgd.xml


### Paths within the schema doc 
xmlstarlet el -a pub.mgd.xml | sort -u > pub.mgd.xpath
database
database/@name
database/@schema
database/tables
database
database/@name
database/@schema
database/tables
database/tables/table
database/tables/table/column
database/tables/table/column/@autoUpdated
database/tables/table/column/child
database/tables/table/column/child/@column
database/tables/table/column/child/@foreignKey
database/tables/table/column
database/tables/table/column/@autoUpdated
database/tables/table/column/child
database/tables/table/column/child/@column
database/tables/table/column/child/@foreignKey

xmlstarlet sel -t -v ./database/tables/table[@name]  pub.mgd.xml  | wc -l
378

that is alot of tables, 


for tab in $(cat head selected_tables.list); do
    echo "$tab"
 xmlstarlet sel -t -o > -v './database/tables/table[@name="$tab"]/column/@name'  pub.mgd.xml
done




